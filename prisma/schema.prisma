// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String    @default("New User")
  description   String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  password      String? //hashed

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  followerCount Int @default(0)

  Article   Article[]
  AuthorTag AuthorTag[]

  VerifiedLike VerifiedLike[]
  VerifiedView VerifiedView[]
  Followers    Follows[]      @relation("Followed")
  Followed     Follows[]      @relation("Follower")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model EmailVerifications {
  email     String   @id
  username  String
  updatedAt DateTime @default(now()) @updatedAt
  password  String
  code      String   @default(uuid())
}

model Article {
  id                     String   @id @default(cuid())
  userId                 String
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title                  String
  description            String
  content                Json
  createdAt              DateTime @default(now())
  updatedAt              DateTime @default(now()) @updatedAt
  tags                   String[]
  verifiedLikeCount      Int      @default(0)
  unverifiedLikeCount    Int      @default(0)
  likeCount              Int      @default(0)
  verifiedDislikeCount   Int      @default(0)
  unverifiedDislikeCount Int      @default(0)
  dislikeCount           Int      @default(0)
  verifiedViewCount      Int      @default(0)
  unverifiedViewCount    Int      @default(0)
  viewCount              Int      @default(0)

  VerifiedLike VerifiedLike[]

  UnverifiedLike UnverifiedLike[]
  VerifiedView   VerifiedView[]
  UnverifiedView UnverifiedView[]
}

model Topic {
  name  String @id
  count Int    @default(0)
}

model AuthorTag {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  name   String
  count  Int    @default(0)

  @@id([userId, name])
}

model VerifiedLike {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  articleId String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  isDislike Boolean
  updatedAt DateTime @default(now()) @updatedAt

  @@id([userId, articleId])
  @@index([articleId, isDislike])
}

model UnverifiedLike {
  ip        String
  articleId String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  isDislike Boolean
  updatedAt DateTime @default(now()) @updatedAt

  @@id([ip, articleId])
  @@index([articleId, isDislike])
}

model VerifiedView {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  articleId String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([articleId, userId])
}

model UnverifiedView {
  ip        String
  articleId String
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@id([articleId, ip])
}

model Follows {
  follower   User   @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  followed   User   @relation("Followed", fields: [followedId], references: [id], onDelete: Cascade)
  followedId String

  @@id([followedId, followerId])
}
